
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Graph {
    int numVertices;
    struct Node** adjList;
};

struct Node* createNode(int data) {
    struct Node* newNode = malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Graph* createGraph(int numVertices) {
    struct Graph* graph = malloc(sizeof(struct Graph));
    graph->numVertices = numVertices;
    graph->adjList = malloc(numVertices * sizeof(struct Node*));
    for (int i = 0; i < numVertices; ++i) graph->adjList[i] = NULL;
    return graph;
}

void addEdge(struct Graph* graph, int src, int dest) {
    struct Node* newNode = createNode(dest);
    newNode->next = graph->adjList[src];
    graph->adjList[src] = newNode;
}

void BFS(struct Graph* graph, int startVertex) {
    int* visited = calloc(graph->numVertices, sizeof(int));
    int queue[graph->numVertices];
    int front = 0, rear = 0;

    visited[startVertex] = 1;
    queue[rear++] = startVertex;

    while (front < rear) {
        int currentVertex = queue[front++];
        printf("%d ", currentVertex);

        for (struct Node* temp = graph->adjList[currentVertex]; temp; temp = temp->next) {
            int adjVertex = temp->data;
            if (!visited[adjVertex]) {
                visited[adjVertex] = 1;
                queue[rear++] = adjVertex;
            }
        }
    }

    free(visited);
    printf("\n");
}

void DFSort(struct Graph* graph, int vertex, int* visited) {
    visited[vertex] = 1;
    printf("%d ", vertex);

    for (struct Node* temp = graph->adjList[vertex]; temp; temp = temp->next) {
        int adjVertex = temp->data;
        if (!visited[adjVertex]) {
            DFSort(graph, adjVertex, visited);
        }
    }
}

void DFS(struct Graph* graph, int startVertex) {
    int* visited = calloc(graph->numVertices, sizeof(int));
    DFSort(graph, startVertex, visited);
    free(visited);
    printf("\n");
}

void delete(struct Graph* graph) {
    for (int i = 0; i < graph->numVertices; ++i) {
        struct Node* temp = graph->adjList[i];
        while (temp) {
            struct Node* next = temp->next;
            free(temp);
            temp = next;
        }
    }

    free(graph->adjList);
    free(graph);
}

int main() {
    int numVertices = 5;
    struct Graph* graph = createGraph(numVertices);

    printf("Padmanabhan S\n192324076\n\n");
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 4);

    BFS(graph, 0);
    DFS(graph, 0);

    delete(graph);

    return 0;
}
